# -*- coding: utf-8 -*-

import nltk
from nltk.corpus import words
nltk.download('words')
wordlist = words.words()

def remove_repetitions(s):
  prev = s[0]
  filtered_chars = [s[0]]
  for char in s[1:]:
    if char != prev:
      filtered_chars.append(char)
      prev = char
  return "".join(filtered_chars)

def check_typos(s):
  text_words = s.strip().split()
  typos = []

  for word in text_words:
    if word.lower() not in wordlist:
      typos.append(word)
  return typos

def generate_substrings(w):
  substrings = []
  for split_point in range(1, len(w)):
    substrings.append((w[:split_point], w[split_point:]))
  return substrings

def generate_replacement_string(substrings):
  for string_tuple in substrings:
    if string_tuple[0] in wordlist and string_tuple[1] in wordlist:
      return string_tuple

def factorial(x):
  prod = 1
  for i in range(1, x+1):
    prod *= i

  return prod

def approximate(x, n):
  result = 1
  for idx in range(1, n):
    result += (x ** idx) / factorial(idx)
  return result

